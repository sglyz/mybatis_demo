<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace: 名称空间，一般需要保持全局唯一， 最好是和dao层的java接口一致， 可以映射 sql语句 到对应的方法名称和参数、返回类型
	mybatis是使用接口动态代理 -->
<mapper namespace="net.xdclass.online_class.dao.VideoMapper">
    <!--利用sql片段-->
    <sql id="base_video_field">
        id,title

    </sql>
    <!--开启二级缓存-->
    <cache eviction="LRU" flushInterval="10000" readOnly="true" size="1024"></cache>

    <!-- statement sql id： 当前mapper下需要唯一 resultType : sql查询结果集的封装 -->
    <!--这里使用一下sql片段
    当不需要二级缓存时可以添加useCache是否开始缓存
   <select id="selectById" resultType="net.xdclass.online_class.domain.Video" useCache="false">

     -->
    <select id="selectById" resultType="net.xdclass.online_class.domain.Video">

		select <include refid="base_video_field"></include> from video where id = #{video_id,jdbcType=INTEGER}

	</select>

    <select id="selectlistVideo" parameterType="java.lang.Integer"
            resultType="net.xdclass.online_class.domain.Video">

		select * from video

	</select>

    <select id="selectByPointAndTitleLike"
            resultType="net.xdclass.online_class.domain.Video">

		select * from video where point = #{point,jdbcType=DOUBLE}
		and title like
		concat('%',#{title,jdbcType=VARCHAR},'%')

	</select>
    <!-- useGeneratedKeys==用来插入数据时拿到某个字段， keyProperty==java实体类对应的字段 keyColumn==数据库对应的字段
        一般用来拿到自增的id -->
    <insert id="add"
            parameterType="Video"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">

		INSERT INTO video (
		title, summary,cover_img, price, create_time, point)
		VALUES
		(#{title,jdbcType=VARCHAR},#{summary,jdbcType=VARCHAR},#{coverImg,jdbcType=VARCHAR},#{price,jdbcType=INTEGER},
		#{createTime,jdbcType=TIMESTAMP},#{point,jdbcType=DOUBLE});

	</insert>

    <!-- 用foreatch 实现批量插入
    collection=遍历的类型
    video=遍历后的每个结果
    separator=分隔
     -->
    <insert id="addBatch"
            parameterType="net.xdclass.online_class.domain.Video">

        INSERT INTO
        video ( title, summary,cover_img, price, create_time, point)
        VALUES
        <foreach collection="list" item="video" separator=",">
            (
            #{video.title,jdbcType=VARCHAR},
            #{video.summary,jdbcType=VARCHAR},
            #{video.coverImg,jdbcType=VARCHAR},
            #{video.price,jdbcType=INTEGER},
            #{video.createTime,jdbcType=TIMESTAMP},
            #{video.point,jdbcType=DOUBLE}
            )
        </foreach>

    </insert>

    <update id="updateVideo" parameterType="net.xdclass.online_class.domain.Video">

	update video

	set
          title = #{title,jdbcType=VARCHAR},
          summary = #{summary,jdbcType=VARCHAR},
          cover_img = #{coverImg,jdbcType=VARCHAR},
          price = #{price,jdbcType=INTEGER},
          create_time = #{createTime,jdbcType=TIMESTAMP},
          point = #{point,jdbcType=DOUBLE}

		  where id = #{id}
</update>

    <!-- 选择性更新 看清楚pojo是包装类型还是基本数据类型，只有包装类型才有null,基本类型int默认是0-->
    <update id="updateVideoSelective" parameterType="net.xdclass.online_class.domain.Video">

        update video

        <trim prefix="set" suffixOverrides=",">

            <if test="title !=null">title = #{title,jdbcType=VARCHAR},</if>
            <if test="summary !=null">summary = #{summary,jdbcType=VARCHAR},</if>
            <if test="coverImg !=null">cover_img = #{coverImg,jdbcType=VARCHAR},</if>
            <if test="price !=0">price = #{price,jdbcType=INTEGER},</if>
            <if test="createTime !=null">create_time = #{createTime,jdbcType=TIMESTAMP},</if>
            <if test="point !=0">point = #{point,jdbcType=DOUBLE},</if>

        </trim>
        where id = #{id}
    </update>
    <!--由于MyBatis的sql写在XML⾥⾯， 有些sql的语法符号和xml⾥⾯的冲突   ⼤于等于 <![CDATA[ >= ]]>  ⼩于等于 <![CDATA[ <= ]]> -->
    <delete id="deleteByCreateTimeAndPrice" parameterType="java.util.Map">
      delete from video where create_time <![CDATA[ > ]]> #{createTime}and price <![CDATA[ >= ]]> #{price}
   </delete>


    <resultMap id="VideoResultMap" type="Video">
        <id column="id" property="id" jdbcType="INTEGER"/>

        <result column="video_title" property="title" jdbcType="VARCHAR"/>
        <result column="" property="" jdbcType="VARCHAR"/>
        <result column="" property="" jdbcType="VARCHAR"/>

    </resultMap>

    <select id="selectBaseFiledByIdWithResultMap" resultMap="VideoResultMap">

        select id, title as video_title, summary,cover_img from video where id = #{video_id}

    </select>





</mapper>